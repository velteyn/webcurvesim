/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TradeJFrame.java
 *
 * Created on 25/04/2009, 10:38:37 AM
 */

package webcurve.ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Observable;
import java.util.Observer;
import java.util.Properties;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import webcurve.client.*;
import webcurve.common.Order;
import webcurve.fix.ExchangeFixAgent;

/**
 * @author dennis_d_chen@yahoo.com
 */
public class TradeJFrame extends javax.swing.JFrame implements ExecutionListener {
    private static Logger log = LoggerFactory.getLogger(TradeJFrame.class);

	private ExchangeFixAgent agent;
    /** Creates new form TradeJFrame */
    public TradeJFrame(String cfgFile) {
    	agent = new ExchangeFixAgent();
    	if ( !agent.Open(cfgFile) )
    		log.error("Cant open cfg file");
    	else
    		log.info("successful log on to fix server");
    	agent.addExecutionListener(this);
        initComponents();
        postInitComponents();
    }

    TreeTable clientOrderTable;
    Vector<ClientOrder> orders = new Vector<ClientOrder>();
    private void postInitComponents()
    {

    	
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    	setLocation((dim.width-getHeight())/2, (dim.height-getWidth())/2);
    	this.setTitle("Webcurve Simulator - Copyright (c) 2001-2005 to Dennis_d_Chen@yahoo.com");
    	
    	TreeTableModel treeModel = new TreeTableModel(orders);
        clientOrderTable = new TreeTable(treeModel);
        jScrollPane1.setViewportView(clientOrderTable);
        
        clientOrderTable.addMouseListener(new MouseAdapter(){
        	
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    execPopupMenu.show(e.getComponent(),
                               e.getX(), e.getY());
                }
            }

            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    execPopupMenu.show(e.getComponent(),
                               e.getX(), e.getY());
                }
            }
        });

        clientOrderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });    	 
        
        clientOrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        execPopupMenu = new javax.swing.JPopupMenu();
        mnSplit = new javax.swing.JMenuItem();
        mnAlgo = new javax.swing.JMenuItem();
        mnPull = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        plOrder = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbExecutions = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        lbMessage = new javax.swing.JLabel();
        plOrderEntry = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbStock = new javax.swing.JComboBox();
        cbSide = new javax.swing.JComboBox();
        edQuantity = new javax.swing.JTextField();
        cbType = new javax.swing.JComboBox();
        edPrice = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btEnterOrder = new javax.swing.JButton();
        btAmendOrder = new javax.swing.JButton();
        btSplitOrder = new javax.swing.JButton();
        btCancelOrder = new javax.swing.JButton();
        plFixTag = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstFixTags = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        ckNOS = new javax.swing.JCheckBox();
        ckCancelReplace = new javax.swing.JCheckBox();
        ckCancel = new javax.swing.JCheckBox();
        btClearFixTags = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        mnSplit.setText("(S)plit");
        mnSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSplitActionPerformed(evt);
            }
        });
        execPopupMenu.add(mnSplit);

        mnAlgo.setText("(A)lgo");
        mnAlgo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAlgoActionPerformed(evt);
            }
        });
        execPopupMenu.add(mnAlgo);

        mnPull.setText("(P)ull");
        mnPull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPullActionPerformed(evt);
            }
        });
        execPopupMenu.add(mnPull);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        plOrder.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(883, 500));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(797, 24));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Client Orders");
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock", "Side", "Quantity", "Type", "Price", "CumQty", "AvgPx", "OrderId"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(jPanel1);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(881, 24));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Executions");
        jPanel4.add(jLabel2);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        tbExecutions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ExecID", "Stock", "Quantity", "Price", "OrderID"
            }
        ));
        jScrollPane2.setViewportView(tbExecutions);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel5.setPreferredSize(new java.awt.Dimension(10, 20));
        jPanel5.add(lbMessage);

        jPanel3.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(jPanel3);

        plOrder.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        plOrderEntry.setLayout(new java.awt.GridLayout(3, 0));

        jLabel3.setText("Stock:");
        plOrderEntry.add(jLabel3);

        jLabel5.setText("Side:");
        plOrderEntry.add(jLabel5);

        jLabel4.setText("Quantity:");
        plOrderEntry.add(jLabel4);

        jLabel8.setText("Type");
        plOrderEntry.add(jLabel8);

        jLabel6.setText("Price:");
        plOrderEntry.add(jLabel6);

        cbStock.setEditable(true);
        cbStock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0005.HK", "0011.HK", "0857.HK", "3968.HK", "1398.HK", "BHP.AX", "CBA.AX", "ANZ.AX", "WOW.AX" }));
        plOrderEntry.add(cbStock);

        cbSide.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BUY", "SELL", "SHORT SELL" }));
        plOrderEntry.add(cbSide);

        edQuantity.setText("20000");
        edQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edQuantityActionPerformed(evt);
            }
        });
        plOrderEntry.add(edQuantity);

        cbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LIMIT", "MARKET" }));
        plOrderEntry.add(cbType);

        edPrice.setText("68.20");
        plOrderEntry.add(edPrice);
        plOrderEntry.add(jLabel12);

        btEnterOrder.setText("Enter Order");
        btEnterOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnterOrderActionPerformed(evt);
            }
        });
        plOrderEntry.add(btEnterOrder);

        btAmendOrder.setText("Amend Order");
        btAmendOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAmendOrderActionPerformed(evt);
            }
        });
        plOrderEntry.add(btAmendOrder);

        btSplitOrder.setText("Split Order");
        btSplitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSplitOrderActionPerformed(evt);
            }
        });
        plOrderEntry.add(btSplitOrder);

        btCancelOrder.setText("Cancel Order");
        btCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelOrderActionPerformed(evt);
            }
        });
        plOrderEntry.add(btCancelOrder);

        plOrder.add(plOrderEntry, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Orders", plOrder);

        plFixTag.setLayout(new java.awt.BorderLayout());

        lstFixTags.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"6061", "0"},
                {"109", "HSBC"},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tag", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(lstFixTags);

        plFixTag.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        ckNOS.setSelected(true);
        ckNOS.setText("New Order Single");
        jPanel6.add(ckNOS);

        ckCancelReplace.setText("Cancel Replace");
        jPanel6.add(ckCancelReplace);

        ckCancel.setText("Cancel");
        jPanel6.add(ckCancel);

        btClearFixTags.setText("Clear FIX tags");
        btClearFixTags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearFixTagsActionPerformed(evt);
            }
        });
        jPanel6.add(btClearFixTags);

        plFixTag.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Extra FIX tags", plFixTag);

        getContentPane().add(jTabbedPane1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Command");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void edQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edQuantityActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_edQuantityActionPerformed

    private void btEnterOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnterOrderActionPerformed
        // TODO add your handling code here:
    	ClientOrder order = new ClientOrder(ClientOrder.nextOrderID());
    	order.setCode(cbStock.getSelectedItem().toString());
    	
        if ( cbSide.getSelectedItem().toString().equals("BUY"))
            order.setSide(ClientOrder.SIDE.BID);
        else if ( cbSide.getSelectedItem().toString().equals("SELL"))
        	order.setSide(ClientOrder.SIDE.ASK);
        else if ( cbSide.getSelectedItem().toString().equals("SHORT SELL"))
        {
        	order.setSide(ClientOrder.SIDE.ASK);
        	order.setShortSell(true);
        }
        else
        {
        	System.out.println("Unknown side: " + cbSide.getSelectedItem().toString());
            return;   
        }
        
        if ( cbType.getSelectedItem().toString().equals("MARKET"))
            order.setType(ClientOrder.TYPE.MARKET);
        else if ( cbType.getSelectedItem().toString().equals("LIMIT"))
        {      	
            order.setType(ClientOrder.TYPE.LIMIT);
            order.setPrice(Double.parseDouble(edPrice.getText()));
        }
        else
        {
        	System.out.println("Unknown type: " + cbType.getSelectedItem().toString());
            return;   
        }
               
        order.setQuantity(Integer.parseInt(edQuantity.getText()));
        order.setStatus(ClientOrder.STATUS.NEW);
        
        orders.add(order);
	    

        clientOrderTable.updateUI();
        

    }//GEN-LAST:event_btEnterOrderActionPerformed

    private void btAmendOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAmendOrderActionPerformed
        // TODO add your handling code here:
    	amendOrder();
    }//GEN-LAST:event_btAmendOrderActionPerformed

    private void btCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelOrderActionPerformed
        // TODO add your handling code here:
    	int[] rows = clientOrderTable.getSelectedRows();
    	if (rows.length < 1)
    		return;
    	ClientOrder order = (ClientOrder)clientOrderTable.getOrderAt(rows[0]);
 
    	if (null ==order.getParentOrder()) // this is a parent order
    	{
    		order.setStatus(ClientOrder.STATUS.CANCELLED);
    	}
    	else
    	{
			if (ckCancel.isSelected())
			{
    			Properties prop = getExtraFixTags();
    			agent.cancelOrder(order, prop);
			}
    		else
    			agent.cancelOrder(order, null);
    	}
    	clientOrderTable.validate();
    	
    }//GEN-LAST:event_btCancelOrderActionPerformed

    private void updateExecutions()
    {
    	int[] rows = clientOrderTable.getSelectedRows();
    	if (rows.length < 1)
    		return;
    	ClientOrder order = (ClientOrder)clientOrderTable.getOrderAt(rows[0]);
    	Vector<Execution> execs = new Vector<Execution>();
    	order.getAllExecutions(execs);

    	DefaultTableModel model = (DefaultTableModel)tbExecutions.getModel();
        model.setRowCount(0);
        for (Execution exec: execs)
        {
            model.addRow( new Object[]{exec.getExecID(),
                                       exec.getCode(),
                                       exec.getQuantity(),
                                       exec.getPrice(),
                                       exec.getClientOrderID()
                });
        }    	
    }
    
    private Properties getExtraFixTags()
    {
    	Properties prop = new Properties();
    	DefaultTableModel model = (DefaultTableModel)lstFixTags.getModel();
		for(int j=0; j<model.getRowCount(); j++)
		{
			if (!(model.getValueAt(j, 0) == null || model.getValueAt(j, 0).toString().isEmpty()))
				prop.setProperty(model.getValueAt(j, 0).toString(), model.getValueAt(j, 1).toString());
		}
		return prop;
    }
    
    private void splitOrder()
    {
    	int[] rows = clientOrderTable.getSelectedRows();
    	if (rows.length < 1)
    		return;
    	Vector<ClientOrder> selectedOrders = new Vector<ClientOrder>();
    	for (int row: rows)
    	{
     		ClientOrder parent = (ClientOrder)clientOrderTable.getOrderAt(row);
     		if (parent.getParentOrder() != null)
     			continue;
    		ClientOrder child = (ClientOrder)parent.clone();
    		child.setParentOrder(parent);
     		child.setClientOrderID(ClientOrder.nextOrderID());
     		child.setQuantity(parent.getLeftQuantity());
    		selectedOrders.add(child);
    	}

    	if (selectedOrders.size()<1)
    		return;
    	
    	SplitJDialog dlg = new SplitJDialog(selectedOrders, this, true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        dlg.setLocation((dim.width-dlg.getHeight())/2, (dim.height-dlg.getWidth())/2);
    	
    	dlg.setVisible(true);
    	if (dlg.ok)
    	{
    		for (ClientOrder order: dlg.childOrders)
    		{
    			order.getParentOrder().getChildOrders().add(order);
    			if (ckNOS.isSelected())
    			{
        			Properties prop = getExtraFixTags();
    				agent.enterOrder(order, prop);
    			}
    			else
    				agent.enterOrder(order, null);
    		}
    	}
    	
    	for (int row: rows)
    	{
    		clientOrderTable.tree.expandPath(clientOrderTable.tree.getPathForRow(row));
    	}
    	
        //clientOrderTable.updateUI();
   	
    }
    
    private void algoOrder()
    {
    	
    }

    private void directOrder()
    {
    	
    }
    
    private void amendOrder()
    {
    	int[] rows = clientOrderTable.getSelectedRows();
    	if (rows.length < 1)
    		return;
    	ClientOrder order = (ClientOrder)clientOrderTable.getOrderAt(rows[0]);
 
    	if (null ==order.getParentOrder()) // this is a parent order
    	{
    		order.setQuantity(Integer.parseInt(edQuantity.getText()));
    		order.setPrice(Double.parseDouble(edPrice.getText()));
    	}
    	else
    	{
    		ClientOrder newOrder = (ClientOrder)order.clone();
    		newOrder.setClientOrderID(ClientOrder.nextOrderID());
    		newOrder.setQuantity(Integer.parseInt(edQuantity.getText()));
    		newOrder.setPrice(Double.parseDouble(edPrice.getText()));
			if (ckCancelReplace.isSelected())
			{
    			Properties prop = getExtraFixTags();
				agent.amendOrder(order, newOrder, prop);
			}
			else
				agent.amendOrder(order, newOrder, null);
    	}
    }
   
    private void mnSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSplitActionPerformed
        // TODO add your handling code here:
    	splitOrder();
    	
    }//GEN-LAST:event_mnSplitActionPerformed

    private void mnAlgoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAlgoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnAlgoActionPerformed

    private void mnPullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPullActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnPullActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    	if (evt.getKeyChar() == 'S' || evt.getKeyChar() == 's' )
        	splitOrder();
    	else if (evt.getKeyChar() == 'A' || evt.getKeyChar() == 'a' )
    		algoOrder();
    	else if (evt.getKeyChar() == 'D' || evt.getKeyChar() == 'd' )
    		directOrder();
        else if (evt.getKeyChar() == 'E' || evt.getKeyChar() == 'e' )
        	updateExecutions();


    }//GEN-LAST:event_formKeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    	int[] rows = clientOrderTable.getSelectedRows();
    	if (rows.length < 1)
    		return;
    	ClientOrder order = (ClientOrder)clientOrderTable.getOrderAt(rows[0]);
    	cbStock.setSelectedItem(order.getCode());
    	if (order.getSide() == ClientOrder.SIDE.BID)
    		cbSide.setSelectedIndex(0);
    	else
    		cbSide.setSelectedIndex(1);
    	if (order.getType() == ClientOrder.TYPE.LIMIT)
    		cbType.setSelectedIndex(0);
    	else
    		cbType.setSelectedIndex(1);
    	
        edQuantity.setText(order.getQuantity().toString());
        edPrice.setText(order.getPrice().toString());
    	
		updateExecutions();
    }//GEN-LAST:event_jTable1MouseClicked

    private void btSplitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSplitOrderActionPerformed
        // TODO add your handling code here:
    	splitOrder();
    }//GEN-LAST:event_btSplitOrderActionPerformed

    private void btClearFixTagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearFixTagsActionPerformed
    	DefaultTableModel model = (DefaultTableModel)lstFixTags.getModel();
		for(int j=0; j<model.getRowCount(); j++)
		{
			for(int i=0; i<model.getColumnCount(); i++)
			model.setValueAt("", j, i);
		}
    }//GEN-LAST:event_btClearFixTagsActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TradeJFrame("FixClient.cfg").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAmendOrder;
    private javax.swing.JButton btCancelOrder;
    private javax.swing.JButton btClearFixTags;
    private javax.swing.JButton btEnterOrder;
    private javax.swing.JButton btSplitOrder;
    private javax.swing.JComboBox cbSide;
    private javax.swing.JComboBox cbStock;
    private javax.swing.JComboBox cbType;
    private javax.swing.JCheckBox ckCancel;
    private javax.swing.JCheckBox ckCancelReplace;
    private javax.swing.JCheckBox ckNOS;
    private javax.swing.JTextField edPrice;
    private javax.swing.JTextField edQuantity;
    private javax.swing.JPopupMenu execPopupMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbMessage;
    private javax.swing.JTable lstFixTags;
    private javax.swing.JMenuItem mnAlgo;
    private javax.swing.JMenuItem mnPull;
    private javax.swing.JMenuItem mnSplit;
    private javax.swing.JPanel plFixTag;
    private javax.swing.JPanel plOrder;
    private javax.swing.JPanel plOrderEntry;
    private javax.swing.JTable tbExecutions;
    // End of variables declaration//GEN-END:variables

	@Override
	public void OnExecution(Execution exec, String info) {
		lbMessage.setText(info);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
        		updateExecutions();
            }
        });				
	}

	@Override
	public void OnOrder(ClientOrder order, String info) {
		lbMessage.setText(info);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
        		clientOrderTable.updateUI();
            }
        });		
	}

}
